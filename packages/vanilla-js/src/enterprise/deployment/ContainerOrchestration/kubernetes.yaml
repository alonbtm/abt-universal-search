# Universal Search - Kubernetes Deployment Configuration
# Complete production-ready Kubernetes manifests with enterprise features

apiVersion: v1
kind: Namespace
metadata:
  name: universal-search
  labels:
    name: universal-search
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: universal-search-config
  namespace: universal-search
data:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  HEALTH_CHECK_PATH: "/health"
  METRICS_PATH: "/metrics"
  MAX_MEMORY_USAGE: "0.85"
  MAX_CPU_USAGE: "0.90"
  CACHE_TTL: "3600"
  REDIS_DB: "0"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: universal-search-secrets
  namespace: universal-search
type: Opaque
data:
  # Base64 encoded values (replace with actual secrets)
  DATABASE_URL: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbTo1NDMyL2RibmFtZQ==
  REDIS_URL: cmVkaXM6Ly86cGFzc3dvcmRAcmVkaXMuZXhhbXBsZS5jb206NjM3OS8w
  JWT_SECRET: c3VwZXItc2VjcmV0LWp3dC1rZXktZm9yLXByb2R1Y3Rpb24=
  API_KEY: YXBpLWtleS1mb3ItZXh0ZXJuYWwtc2VydmljZXM=

---
# Deployment for Universal Search application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: universal-search-app
  namespace: universal-search
  labels:
    app: universal-search
    component: app
    version: v1
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: universal-search
      component: app
  template:
    metadata:
      labels:
        app: universal-search
        component: app
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: universal-search-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: app
        image: universal-search:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9229
          name: debug
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: universal-search-config
        - secretRef:
            name: universal-search-secrets
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: liveness
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: readiness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 500Mi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - universal-search
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: NotIn
                values:
                - spot

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: universal-search-sa
  namespace: universal-search
automountServiceAccountToken: false

---
# Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: universal-search-service
  namespace: universal-search
  labels:
    app: universal-search
    component: app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: universal-search
    component: app

---
# Service for external LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: universal-search-lb
  namespace: universal-search
  labels:
    app: universal-search
    component: loadbalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 443
    targetPort: http
    protocol: TCP
    name: https
  selector:
    app: universal-search
    component: app

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: universal-search-hpa
  namespace: universal-search
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: universal-search-app
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: universal-search-pdb
  namespace: universal-search
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: universal-search
      component: app

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: universal-search-netpol
  namespace: universal-search
spec:
  podSelector:
    matchLabels:
      app: universal-search
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Ingress for external traffic
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: universal-search-ingress
  namespace: universal-search
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - universalsearch.com
    - www.universalsearch.com
    - api.universalsearch.com
    secretName: universal-search-tls
  rules:
  - host: universalsearch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: universal-search-service
            port:
              number: 80
  - host: www.universalsearch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: universal-search-service
            port:
              number: 80
  - host: api.universalsearch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: universal-search-service
            port:
              number: 80

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: universal-search-metrics
  namespace: universal-search
  labels:
    app: universal-search
    component: monitoring
spec:
  selector:
    matchLabels:
      app: universal-search
      component: app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true

---
# Persistent Volume for cache
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: universal-search-cache-pvc
  namespace: universal-search
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3-encrypted

---
# Job for database migrations
apiVersion: batch/v1
kind: Job
metadata:
  name: universal-search-migration
  namespace: universal-search
  labels:
    app: universal-search
    component: migration
spec:
  template:
    metadata:
      labels:
        app: universal-search
        component: migration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: migration
        image: universal-search:latest
        command: ["npm", "run", "migrate:up"]
        envFrom:
        - configMapRef:
            name: universal-search-config
        - secretRef:
            name: universal-search-secrets
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# CronJob for periodic maintenance tasks
apiVersion: batch/v1
kind: CronJob
metadata:
  name: universal-search-maintenance
  namespace: universal-search
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: universal-search
            component: maintenance
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            fsGroup: 1001
          containers:
          - name: maintenance
            image: universal-search:latest
            command: ["/bin/sh", "-c"]
            args:
            - |
              echo "Starting maintenance tasks..."
              npm run cache:cleanup
              npm run logs:rotate
              npm run metrics:export
              echo "Maintenance completed"
            envFrom:
            - configMapRef:
                name: universal-search-config
            - secretRef:
                name: universal-search-secrets
            resources:
              requests:
                cpu: 50m
                memory: 128Mi
              limits:
                cpu: 100m
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          nodeSelector:
            node-type: worker

---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: universal-search
  name: universal-search-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: universal-search-rolebinding
  namespace: universal-search
subjects:
- kind: ServiceAccount
  name: universal-search-sa
  namespace: universal-search
roleRef:
  kind: Role
  name: universal-search-role
  apiGroup: rbac.authorization.k8s.io